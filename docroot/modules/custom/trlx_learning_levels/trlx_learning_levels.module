<?php

/**
 * @file
 * Level module file.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

/**
 * Function for generate random file path.
 *
 * @return string
 *   Generate file path.
 */
function trlx_generate_unique_folder_path() {
  mt_srand((double) microtime() * 10000);
  $char_id = strtoupper(md5(uniqid(rand(), TRUE)));
  $hyphen = chr(45);
  $uuid = chr(123)
    . substr($char_id, 0, 8) . $hyphen
    . substr($char_id, 8, 4) . $hyphen
    . substr($char_id, 12, 4) . $hyphen
    . substr($char_id, 16, 4) . $hyphen
    . substr($char_id, 20, 12)
    . chr(125);

  return strtolower(trim($uuid, '{}'));
}

/**
 * Function to delete file path.
 *
 * @param string $dir
 *   File directory path.
 */
function trlx_delete_learning_levels_files($dir) {
  $files = array_diff(scandir($dir), ['.', '..']);
  foreach ($files as $file) {
    (is_dir("$dir/$file")) ? trlx_delete_learning_levels_files("$dir/$file") : unlink("$dir/$file");
  }
  return rmdir($dir);
}

/**
 * Implements hook_field_widget_WIDGET_TYPE_form_alter().
 */
function trlx_learning_levels_field_widget_entity_reference_paragraphs_form_alter(&$element, &$form_state, $context) {

  // Hide File path field.
  if (isset($element['subform']['field_file_path'])) {
    $element['subform']['field_file_path']['#type'] = 'hidden';
  }
}

/**
 * Implements hook_form_alter().
 */
function trlx_learning_levels_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'node_level_interactive_content_form':
    case 'node_level_interactive_content_edit_form':
      // Add custom validation for intractive content.
      $form['#validate'][] = 'trlx_learning_levels_validate';
      break;

    case 'taxonomy_term_learning_category_form':
    case 'taxonomy_term_learning_category_form':
      // Fetch content section mapped sections from config.
      $config = \Drupal::config('trlx_utility.settings');
      $content_section = $config->get('learning_levels');
      foreach ($form['field_content_section']['widget']['#options'] as $id => $value) {
        $term_id[] = $id;
      }
      foreach ($term_id as $key => $value) {
        if (!in_array($value, array_keys($content_section))) {
          unset($form['field_content_section']['widget']['#options'][$value]);
        }
      }
      break;

    default:
  }
}

/**
 * Implements validation to check elx learning levels file.
 *
 * @param mixed $form
 *   Form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function trlx_learning_levels_validate(&$form, FormStateInterface $form_state) {
  if (\Drupal::request()->query->get('element_parents') != 'field_interactive_content/widget/0/subform/field_articulate_file_upload/widget/0') {
    $uploaded_file = $form_state->getValue('field_interactive_content');
    foreach ($uploaded_file as $value) {

      $path = trlx_generate_unique_folder_path();
      $uri = 'public://' . $path;

      $uploaded_file = $value['subform']['field_articulate_file_upload'][0]['fids'];
      $file_storage = \Drupal::entityManager()->getStorage('file');
      if ($file = $file_storage->load($uploaded_file[0])) {
        $file_system = \Drupal::service('file_system');
        // Archived file path.
        $archived_file_path = \Drupal::service('file_system')->realpath($file->getFileUri());
        // Archived extract file path.
        $extract_dir = \Drupal::service('file_system')->realpath($uri);
        $archiver = archiver_get_archiver($file_system->realpath($archived_file_path))->getArchive();
        // Extracting file zip.
        $result = $archiver->extractTo($extract_dir);
        $story = $uri . '/story.html';
        $index = $uri . '/index.html';
        $tincan = $uri . '/tincan.xml';

        // Validation for check files.
        $index_file = "";
        if (file_exists($story)) {
          $index_file = "story.html";
        }
        elseif (file_exists($index)) {
          $index_file = "index.html";
        }

        if (file_exists($story) || file_exists($index) && file_exists($tincan)) {
          // Get current node id.
          $node_id = $form_state->getFormObject()->getEntity()->id();
          // Get current node translation language.
          $lang = $form_state->getValue('langcode')[0]['value'];
          $node = !empty($node_id) ? Node::load($node_id) : FALSE;
          // Get translation.
          $translation = !empty($node) ? $node->hasTranslation($lang) : FALSE;
          if ($result === TRUE) {
            // Get existing file path value.
            $filepath = $form_state->getValue('field_interactive_content')[0]['subform']['field_file_path'][0]['value'];
            // Check if the translaiton exists for the node.
            if (!empty($filepath) && $translation == TRUE) {
              $str = trim($filepath, '/');
              $str = explode('/', $str);
              $dir = 'public://' . $str[3];
              $delpath = \Drupal::service('file_system')->realpath($dir);
              // Delete existing file directory on edit page.
              trlx_delete_learning_levels_files($delpath);
            }

            $url = parse_url(file_create_url($uri))['path'] . '/' . $index_file;
            // Set url of file directory in hidden "file path" field.
            $form_state->getValue('field_interactive_content')[0]['subform']['field_file_path'][0]['value'] = $url;
          }
        }
        else {
          // Set error if file is not supported.
          $form_state->setErrorByName("field_interactive_content][0][subform]
          [field_title][0", t('Articulate file is not supported.'));
        }
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function trlx_learning_levels_views_query_alter($view, $query) {
  $view_id = [
    'level_interactive_content',
  ];
  $current_display = [
    'rest_export_level_interactive_content',
  ];
  if (in_array($view->id(), $view_id) && in_array($view->current_display,
   $current_display)) {
    // Add join in node_field_data from draggableviews_structure for set order.
    // in level interactive module listing.
    $definition = [
      'table' => 'draggableviews_structure',
      'field' => 'entity_id',
      'left_table' => 'node_field_data',
      'left_field' => 'nid',
    ];
    $join = Drupal::service('plugin.manager.views.join')->createInstance('standard', $definition);
    $query->addRelationship('draggableviews_structure', $join, 'entity_id');
  }
}
