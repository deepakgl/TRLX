<?php

/**
 * @file
 * Contains hook implementations for the audit logs in ELK.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Logger\RfcLogLevel;
use Drupal\trlx_audit_log\AuditEventLogger;

/**
 * Implements hook_entity_update().
 */
function trlx_audit_log_entity_update(EntityInterface $entity) {

  if (!empty($entity->getEntityTypeId())) {

    // AuditEventLogger object to access functions.
    $logger_obj = new AuditEventLogger();
    $context['user'] = \Drupal::currentUser();
    $context['channel'] = $logger_obj->getLoggerType();
    $context['request_uri'] = $logger_obj->getRequestUri();

    $message = $logger_obj->getAuditLogMessage($entity, 'updated');

    // Log the audit log for update in ELK.
    \Drupal::service('logger.stdout')->log(RfcLogLevel::INFO, $message, $context);
  }
}

/**
 * Implements hook_entity_insert().
 */
function trlx_audit_log_entity_insert(EntityInterface $entity) {
  if (!empty($entity->getEntityTypeId())) {

    // AuditEventLogger object to access functions.
    $logger_obj = new AuditEventLogger();
    $context['user'] = \Drupal::currentUser();
    $context['channel'] = $logger_obj->getLoggerType();
    $context['request_uri'] = $logger_obj->getRequestUri();

    $message = $logger_obj->getAuditLogMessage($entity, 'Created');

    // Log the audit log  for insert in ELK.
    \Drupal::service('logger.stdout')->log(RfcLogLevel::INFO, $message, $context);
  }
}

/**
 * Implements hook_entity_delete().
 */
function trlx_audit_log_entity_delete(EntityInterface $entity) {

  if (!empty($entity->getEntityTypeId())) {

    // AuditEventLogger object to access functions.
    $logger_obj = new AuditEventLogger();
    $context['user'] = \Drupal::currentUser();
    $context['channel'] = $logger_obj->getLoggerType();
    $context['request_uri'] = $logger_obj->getRequestUri();

    $message = $logger_obj->getAuditLogMessage($entity, 'Deleted');

    // Log the audit log for delete in ELK.
    \Drupal::service('logger.stdout')->log(RfcLogLevel::INFO, $message, $context);
  }
}
