<?php

/**
 * @file
 * Dashboard file.
 */

use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\views\ViewExecutable;
use Drupal\trlx_lang_translation\Utility\LangUtility;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * @file
 * Dashboard module file.
 */

/**
 * Implements hook_preprocess_html().
 */
function trlx_dashboard_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'trlx_dashboard/trlx_admin';
  // Get current path or uri.
  $current_path = \Drupal::service('path.current')->getPath();
  $currentAccount = \Drupal::currentUser();
  $roles = $currentAccount->getRoles();
  if ((in_array('el_regional_market_admin', $roles)) && ($current_path == '/admin/structure/taxonomy/manage/badges/overview')) {
    $variables['#attached']['library'][] = 'trlx_dashboard/trlx_ma';
  }
}

/**
 * Implements hook_user_login().
 */
function trlx_dashboard_user_login($account) {
  $roles = $account->getRoles();
  // $url = Url::fromRoute('view.dashboard.dashboard_unpublished');
  if (in_array('el_regional_market_admin', $roles)) {
    $response = new RedirectResponse('/dashboard/published');
    $response->send();
    return;
  }
  elseif (in_array('el_nyo_global_education_system_admin', $roles)) {
    $response = new RedirectResponse('/dashboard/published');
    $response->send();
    return;
  }
}

/**
 * Implements hook_views_post_render().
 */
function trlx_dashboard_views_post_render(ViewExecutable $view) {
  if ($view->id() == 'dashboard') {
    $roles = getUserRoles(\Drupal::currentUser()->id());
    // Set the view title.
    $view->setTitle('Welcome GA User !!');
    if ($roles) {
      $view->setTitle('Welcome MA User !!');
    }
  }
}

/**
 * Fetch user roles.
 *
 * @param int $uid
 *   User uid.
 * @param string $key
 *   Key name.
 * @param array $user_role
 *   Role of users.
 *
 * @return array
 *   User roles.
 */
function getUserRoles($uid, $key = NULL, array $user_role = []) {
  $query = db_select('user__roles', 'ur')
    ->distinct()
    ->fields('ur', ['roles_target_id'])
    ->condition('ur.entity_id', $uid, '=')
    ->execute()->fetchAll();
  $roles = array_map(function ($e) {
    return is_object($e) ? $e->roles_target_id : $e['roles_target_id'];
  }, $query);
  // print_r($roles);exit;
  if (empty($key)) {
    if (in_array('administrator', $roles) || in_array('el_nyo_global_education_system_admin', $roles)) {
      return FALSE;
    }
  }
  elseif (!empty($user_role) && is_array($user_role)) {
    foreach ($user_role as $key => $value) {
      if (in_array($value, $roles)) {
        return TRUE;
      }
    }

    return FALSE;
  }

  return $roles;
}

/**
 * Implements hook_views_pre_render().
 */
function trlx_dashboard_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'dashboard') {
    foreach ($view->result as $key => $result) {
      $entity = $result->_entity;
      switch ($view->current_display) {
        case 'dashboard_available_for_a_translation':
          $lang_utility = new LangUtility();
          // Get node availabe translation.
          $available_translation = $lang_utility->getTranslationLanguageByNid($entity->id());
          // Get system languages.
          $system_lang = $lang_utility->getMarketLanguageByUserId('lang');
          $diff = array_diff(array_keys($system_lang), $available_translation);
          if (empty($diff)) {
            // Delete a row.
            unset($view->result[$key]);
          }
          break;
      }

    }
  }
}

/**
 * Implements template_preprocess_views_view_table()
 */
function trlx_dashboard_preprocess_views_view_table(&$variables) {
  $currentAccount = \Drupal::currentUser();
  $roles = $currentAccount->getRoles();
  if (!in_array('el_regional_market_admin', $roles)) {
    return;
  }

  /** @var \Drupal\views\ViewExecutable $view */
  $view = $variables['view'];
  // Check for view.
  if (($view->id() == 'dashboard') && ($view->current_display == 'dashboard_available_for_a_translation')) {
    $rows = $variables['rows'];
    foreach ($rows as $key => $row) {
      $row_object = $row['columns']['type']['content'][0]['field_output']['#markup']->__toString();
      $row_explode = explode("&", $row_object);
      if (($row_explode[0] == "T" && $row_explode[1] == "amp;C") || ($row_object == 'Privacy Policy')) {
        $variables['rows'][$key]['columns']['translation_link']['content'][0]['field_output'] = '';
      }
    }
  }
}

/**
 * Implements hook_views_query_alter().
 */
function trlx_dashboard_views_query_alter(ViewExecutable $view, $query) {
  if ($view->id() == 'dashboard') {
    $lang_utility = new LangUtility();

    if ($view->current_display == 'dashboard_published' ||
      $view->current_display == 'dashboard_unpublished') {
      $roles = getUserRoles(\Drupal::currentUser()->id());
      if ($roles) {
        // Get system languages.
        $system_lang = $lang_utility->getMarketLanguageByUserId();
        // Add langcode condition based on system lang for MA.
        $query->addWhere(1, 'node_field_data.langcode', array_keys($system_lang), 'IN');
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function trlx_dashboard_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'views_exposed_form':
      $roles = getUserRoles(\Drupal::currentUser()->id());
      if ($roles) {
        if ($form['#id'] == 'views-exposed-form-dashboard-dashboard-published' ||
        $form['#id'] == 'views-exposed-form-dashboard-dashboard-unpublished') {
          unset($form['langcode']['#options']['en']);
        }
      }
  }
}

/**
 * Implements hook_entity_operation().
 */
function trlx_dashboard_entity_operation_alter(array &$operations, EntityInterface $entity) {
  // Make sure we are modifying only taxonomy entity and node.
  $entityTypeId = $entity->getEntityTypeId();
  $currentAccount = \Drupal::currentUser();
  $roles = $currentAccount->getRoles();
  if ($entityTypeId === 'taxonomy_term') {
    // code...
    if (($entity->getVocabularyId() == 'badges') || ($entity->getVocabularyId() == 'learning_category') ||
     ($entity->getVocabularyId() == 'consumer_category')) {
      if (in_array('el_regional_market_admin', $roles)) {
        if (!empty($entity->id())) {
          $database = \Drupal::database();
          $query = $database->select('term_user_relation', 't');
          $query->fields('t', ['tid', 'vid', 'uid', 'role']);
          $query->condition('tid', $entity->id());
          $query->range(0, 1);
          $response = $query->execute()->fetchAll();
          if ($response) {
            $response = (array) $response[0];
            if ('el_regional_market_admin' !== $response['role']) {
              unset($operations['edit']);
              unset($operations['delete']);
            }
          }
        }
      }
    }
  }

  if (($entityTypeId === 'node') && (in_array('el_regional_market_admin', $roles))) {
    if (($entity->getType() == 't_c') || ($entity->getType() == 'privacy_policy')) {
      unset($operations['translate']);
    }
  }
}

/**
 * Implements hook_entity_insert().
 */
function trlx_dashboard_entity_insert(EntityInterface $entity) {
  // Get entity type id.
  $entityTypeId = $entity->getEntityTypeId();
  $role = '';
  if ($entityTypeId !== 'taxonomy_term') {
    return;
  }

  if (($entity->getVocabularyId() == 'badges') || ($entity->getVocabularyId() == 'learning_category') ||
    ($entity->getVocabularyId() == 'consumer_category')) {
    $currentAccount = \Drupal::currentUser();
    $roles = $currentAccount->getRoles();
    if (in_array('el_regional_market_admin', $roles)) {
      $role = 'el_regional_market_admin';
    }
    elseif (in_array('el_nyo_global_education_system_admin', $roles)) {
      $role = 'el_nyo_global_education_system_admin';
    }
    else {
      $role = 'administrator';
    }

    $table = 'term_user_relation';
    // Create an object of type Select.
    $record_keep_table = $table;
    $table_exist = \Drupal::database()->schema()->tableExists($record_keep_table);

    if ($table_exist == FALSE) {
      $schema = [
        'fields' => [
          'id' => ['type' => 'serial', 'not null' => TRUE],
          'tid' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
          'vid' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
          'uid' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
          'role' => ['type' => 'varchar', 'length' => 255, 'not null' => TRUE],
        ],
        'primary key' => ['id'],
      ];
      \Drupal::database()->schema()->createTable($record_keep_table, $schema);
    }

    if ($table_exist == TRUE) {
      $database = \Drupal::database();
      $database->insert($table)
        ->fields([
          'tid' => $entity->id(),
          'vid' => $entity->getVocabularyId(),
          'uid' => $currentAccount->id(),
          'role' => $role,
        ])
        ->execute();
    }
  }
}
