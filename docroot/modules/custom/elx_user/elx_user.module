<?php

/**
 * @file
 * User module file.
 */

use Drupal\views\ViewExecutable;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\BubbleableMetadata;

/**
 * Implements hook_form_alter().
 */
function elx_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'user_login_form':
      $form['#attributes']['autocomplete'] = 'off';
      $form['#validate'][] = 'elx_user_login_validate';
      break;

    case 'user_pass':
      $form['#attributes']['autocomplete'] = 'off';
      break;

    case 'user_register_form':
      if ($form['administer_users']['#value']) {
        // Default to sending user an account creation notification.
        $form['account']['notify']['#default_value'] = 1;
        // Assign random password.
        $pass = user_password();
        $form['account']['pass']['#value'] = [
          'pass1' => $pass,
          'pass2' => $pass,
        ];
        // Hide password fields at the time of user creation.
        $form['account']['pass']['#access'] = FALSE;
      }

    default:
  }
}

/**
 * Implements hook_token_info().
 */
function elx_user_token_info() {
  $types['elx_rest_password'] = [
    'name' => t('ELX rest password'),
    'description' => t('Custom site-wide tokens defined in elx_rest_password
     module.'),
  ];
  $tokens['rest_temp_password'] = [
    'name' => t('Rest temp password'),
    'description' => t('Rest temp password.'),
  ];

  return [
    'types' => $types,
    'tokens' => [
      'elx_rest_password' => $tokens,
    ],
  ];
}

/**
 * Implements hook_tokens().
 */
function elx_user_tokens($type, $tokens, array $data, array $options, BubbleableMetadata $bubbleable_metadata) {
  $replacements = [];
  if ($type == 'elx_rest_password') {
    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'rest_temp_password':
          $text = rest_password_temp_pass_token($data['user']);
          $replacements[$original] = $text;
          break;
      }
    }
  }

  return $replacements;
}

/**
 * The function check if user's password field is empty.
 *
 * @param string $email
 *   Email id.
 *
 * @return mixed
 *   Response
 */
function elx_is_password_expired($email) {
  $response = '';
  $query = \Drupal::database()->select('users_field_data', 'u');
  $query->fields('u', ['langcode']);
  $or = db_or();
  $or->condition('u.name', $email, '=');
  $or->condition('u.mail', $email, '=');
  $query->condition($or);
  $and = db_and();
  $and->condition('u.pass', '', '=');
  $query->condition($and);
  $result = $query->execute()->fetchAll();
  if (empty($result)) {
    return $response;
  }
  $lang = $result[0]->langcode;
  $response = get_login_error_message($lang);

  return $response;
}

/**
 * This function return error message.
 *
 * @param string $lang
 *   Language.
 *
 * @return string
 *   Message.
 */
function get_login_error_message($lang) {
  // Create confirm password link.
  /* $elx_site_url = rtrim(\Drupal::config('elx_utility.settings')->get('elx_front_end_url'), '/')
  . "/requestpassword";
  $url = \Drupal::l(t("Reset Password"), \Drupal\Core\Url::fromUri($elx_site_url));
  // Set message with reset password link.
  $message = t('Your password has expired. Please use the link below to reset now! <br/> %reset',
  ['%reset' => $url]); */

  $message = 'Your password has expired. Please click “Request new password” below to reset it now!';

  return $message;
}

/**
 * Custom validation handler for user login form.
 *
 * @param mixed $form
 *   Form object.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form state object.
 */
function elx_user_login_validate($form, FormStateInterface &$form_state) {
  $is_ba = elx_get_user_by_mail($form_state->getValue('name'));
  if (!empty($is_ba) && in_array('beauty_advisor', $is_ba) && count($is_ba) == 1) {
    $form_state->setErrorByName('pass', 'you are not authorized to access this application.');
  }
  $message = elx_is_password_expired($form_state->getValue('name'));
  if (!empty($message)) {
    $form_state->setErrorByName('pass', $message);
  }
}

/**
 * The function fetch user roles.
 *
 * @param string $email
 *   Email id.
 *
 * @return mixed
 *   Response.
 */
function elx_get_user_by_mail($email) {
  $response = '';
  $query = \Drupal::database()->select('users_field_data', 'u');
  $query->join('user__roles', 'role', 'role.entity_id = u.uid');
  $query->fields('role', ['roles_target_id']);
  $or = db_or();
  $or->condition('u.name', $email, '=');
  $or->condition('u.mail', $email, '=');
  $query->condition($or);
  $result = $query->execute()->fetchCol();
  if (empty($result)) {
    return $response;
  }

  return $result;
}

/**
 * Implements hook_views_pre_render().
 */
function elx_user_views_pre_render(ViewExecutable $view) {
  if ($view->id() == 'user_admin_people') {
    foreach ($view->result as $value) {
      if ($value->_entity->get('access')->value == '0') {
        $value->_entity->set('access', NULL);
      }
    }
  }
}
