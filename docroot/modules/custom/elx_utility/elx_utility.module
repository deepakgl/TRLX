<?php

/**
 * @file
 * Utility file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\trlx_utility\RedisClientBuilder;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\trlx_stamp\Utility\StampUtility;
use Drupal\trlx_utility\Utility\CommonUtility;
use Drupal\Core\Language\LanguageInterface;

/**
 * Set node id and terms id using rest resource.
 *
 * @param object $node
 *   Node object.
 *
 * @return bool
 *   True or false.
 */
function _elx_utility_http_request($node) {
  $elx_site_url = \Drupal::config('elx_utility.settings')->get('elx_site_url');
  $uri = $elx_site_url . '/lm/api/v1/setTermsNodeData';
  $nid = $node->id();
  $tid = $node->get('field_learning_category')->getValue()[0]['target_id'];
  $client = \Drupal::httpClient();
  try {
    $request = $client->post($uri, [
      'json' => ['nid' => $nid, 'tid' => $tid],
      'headers' => ['Accept' => 'application/json'],
    ]);
    $response = (string) $request->getBody();
  }
  catch (\Exception $e) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Implements hook_form_alter().
 */
function elx_utility_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  switch ($form_id) {
    case 'taxonomy_term_static_translation_form':
      $form['name']['widget'][0]['value']['#title'] = 'Key';
      $form['relations']['#access'] = FALSE;
      if (!$form_state->getFormObject()->getEntity()->isNew()) {
        $form['name']['#disabled'] = TRUE;
      }
      break;

    case 'taxonomy_term_badges_form':
      if (!$form_state->getFormObject()->getEntity()->isNew()) {
        $form['name']['#disabled'] = TRUE;
        $form['description']['#disabled'] = TRUE;
        $form['path']['#disabled'] = TRUE;
      }
      break;

    case 'taxonomy_term_profanity_list_form':
      $commonUtility = new CommonUtility();
      $options = $commonUtility->getActiveLanguages();
      array_shift($options);
      $form['langcode']['widget'][0]['value']['#options'] = $options;
      break;
    default:
  }
}

/**
 * Method to clear redis cache.
 */
function elx_utility_clear_redis_cache($patterns) {
  $redisObj = RedisClientBuilder::getRedisClientObject('check');
  if (!empty($redisObj) && $redisObj->client) {
    $result = $redisObj->deleteKeyPattern($patterns);
  }
}

/**
 * Implements hook_ENTITY_insert().
 */
function elx_utility_entity_insert(EntityInterface $entity) {
  $commonUtility = new CommonUtility();
  $env = \Drupal::config('elx_utility.settings')->get('elx_environment');
  if ($entity->getEntityTypeId() == 'node') {
    switch ($entity->gettype()) {
      case 'level_interactive_content':
        _elx_utility_http_request($entity);
        break;

      case 'stories':
        $contentSection = $entity->get('field_content_section')->referencedEntities();
        $contentSectionkey = (!empty($contentSection)) ? (array_shift($contentSection)->get('field_content_section_key')->value) : '';
        $lang_code = $entity->language()->getId();
        if (isset($contentSectionkey)) {
          switch ($contentSectionkey) {
            case 'trend':
              $patterns = [$env . ':home:tr_trends_' . $lang_code . '*', $env . ':listing:tr_trend_' . $lang_code . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'insiderCorner':
              $patterns = [$env . ':home:insider_corner_' . $lang_code . '*', $env . ':listing:insider_corner_' . $lang_code . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'sellingTips':
              $patterns = [$env . ':listing:selling_tips_' . $lang_code . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'consumer':
              $patterns = [$env . ':listing:consumers_' . $lang_code . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;
          }
        }
        break;

      case 'product_detail':
        $brand_id = $entity->get('field_brands')->first()->getValue()['target_id'];
        $brand_key = $commonUtility->getBrandKeyByTermId($brand_id);
        $lang_code = $entity->language()->getId();
        $patterns = [$env . ':brand:factsheets_' . $brand_key . '_' . $lang_code . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;

      case 'tools':
        $brand_id = $entity->get('field_brands')->first()->getValue()['target_id'];
        $brand_key = $commonUtility->getBrandKeyByTermId($brand_id);
        $lang_code = $entity->language()->getId();
        $patterns = [$env . ':brand:videos_' . $brand_key . '_' . $lang_code . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;

      case 'brand_story':
        $brand_id = $entity->get('field_brands')->first()->getValue()['target_id'];
        $brand_key = $commonUtility->getBrandKeyByTermId($brand_id);
        $lang_code = $entity->language()->getId();
        $patterns = [$env . ':brand:story_' . $brand_key . '_' . $lang_code];
        elx_utility_clear_redis_cache($patterns);
        break;
    }
    // Purge Redis data.
    elx_utility_purge_redis_data($entity);
  }
  elseif ($entity->getEntityTypeId() == 'taxonomy_term') {
    $tid = $entity->id();
    $type = elx_utility_get_term_type($tid);
    if ($type == 'badges') {
      $stamp_utility = new StampUtility();
      $stamp_utility->migrateStamp();
    }
    // Purge Redis data.
    elx_utility_purge_redis_terms_data($type, $tid);
  }
  elseif ($entity->getEntityTypeId() == 'entity_subqueue') {
    // Purge Redis data.
    if ($entity->id() == 'insider_corner_hompage') {
      $patterns = [$env . ':home:insider_corner_' . '*'];
      elx_utility_clear_redis_cache($patterns);
    }
    elx_utility_purge_redis_data($entity);
  }
  elseif ($entity->getEntityTypeId() == 'menu_link_content') {
    if ($entity->getMenuName() == 'privacy-menu' || $entity->getMenuName() == 'social-media' || $entity->getMenuName() == 'header-menu' || $entity->getMenuName() == 'main') {
      // Purge Redis data.
      elx_utility_purge_redis_data($entity);
    }

  }
}

/**
 * Implements hook_ENTITY_update().
 */
function elx_utility_entity_update(EntityInterface $entity) {
  $commonUtility = new CommonUtility();
  $env = \Drupal::config('elx_utility.settings')->get('elx_environment');
  if ($entity->getEntityTypeId() == 'node') {
    switch ($entity->gettype()) {
      case 'level_interactive_content':
        _elx_utility_http_request($entity);
        break;

      case 'stories':
        $contentSection = $entity->get('field_content_section')->referencedEntities();
        $contentSectionkey = (!empty($contentSection)) ? (array_shift($contentSection)->get('field_content_section_key')->value) : '';
        $contentSectionOriginal = $entity->original->get('field_content_section')->referencedEntities();
        $contentSectionkeyOriginal = (!empty($contentSectionOriginal)) ? (array_shift($contentSectionOriginal)->get('field_content_section_key')->value) : '';
        $lang_code = $entity->language()->getId();
        if (isset($contentSectionkey)) {
          switch ($contentSectionkey) {
            case 'trend':
              $patterns = [$env . ':home:tr_trends_' . $lang_code . '*', $env . ':listing:tr_trend_' . $lang_code . '*'];
              $patterns_original = trlx_helper_content_section($contentSectionkeyOriginal, $env, $lang_code);
              $patterns = array_merge($patterns, $patterns_original);
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'insiderCorner':
              $patterns = [$env . ':home:insider_corner_' . $lang_code . '*', $env . ':listing:insider_corner_' . $lang_code . '*'];
              $patterns_original = trlx_helper_content_section($contentSectionkeyOriginal, $env, $lang_code);
              $patterns = array_merge($patterns, $patterns_original);
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'sellingTips':
              $patterns = [$env . ':listing:selling_tips_' . $lang_code . '*'];
              $patterns_original = trlx_helper_content_section($contentSectionkeyOriginal, $env, $lang_code);
              $patterns = array_merge($patterns, $patterns_original);
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'consumer':
              $patterns = [$env . ':listing:consumers_' . $lang_code . '*'];
              $patterns_original = trlx_helper_content_section($contentSectionkeyOriginal, $env, $lang_code);
              $patterns = array_merge($patterns, $patterns_original);
              elx_utility_clear_redis_cache($patterns);
              break;

          }
        }
        break;

      case 'product_detail':
        $lang_code = $entity->language()->getId();
        $previous_brandId = array_column($entity->original->get('field_brands')->getValue(), 'target_id');
        $brand_key = $commonUtility->getBrandKeyByTermId($previous_brandId[0]);
        $patterns = [$env . ':brand:factsheets_' . $brand_key . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;

      case 'tools':
        $lang_code = $entity->language()->getId();
        $previous_brandId = array_column($entity->original->get('field_brands')->getValue(), 'target_id');
        $brand_key = $commonUtility->getBrandKeyByTermId($previous_brandId[0]);
        $patterns = [$env . ':brand:videos_' . $brand_key . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;

      case 'brand_story':
        $lang_code = $entity->language()->getId();
        $previous_brandId = array_column($entity->original->get('field_brands')->getValue(), 'target_id');
        $brand_key = $commonUtility->getBrandKeyByTermId($previous_brandId[0]);
        $patterns = [$env . ':brand:story_' . $brand_key . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;
    }
    // Purge Redis data.
    elx_utility_purge_redis_data($entity);
  }
  elseif ($entity->getEntityTypeId() == 'taxonomy_term') {
    $tid = $entity->id();
    $type = elx_utility_get_term_type($tid);
    if ($type == 'badges') {
      $stamp_utility = new StampUtility();
      $stamp_utility->migrateStamp();
    }
    // Purge Redis data.
    elx_utility_purge_redis_terms_data($type, $tid);
  }
  elseif ($entity->getEntityTypeId() == 'entity_subqueue') {
    // Purge Redis data.
    if ($entity->id() == 'insider_corner_hompage') {
      $patterns = [$env . ':home:insider_corner_' . '*'];
      elx_utility_clear_redis_cache($patterns);
    }

    elx_utility_purge_redis_data($entity);
  }
  elseif ($entity->getEntityTypeId() == 'menu_link_content') {
    if ($entity->getMenuName() == 'privacy-menu' || $entity->getMenuName() == 'social-media' || $entity->getMenuName() == 'header-menu' || $entity->getMenuName() == 'main') {
      // Purge Redis data.
      elx_utility_purge_redis_data($entity);
    }
  }
}

/**
 * Helper for content section.
 *
 * @param string $section
 *   Section name.
 * @param string $env
 *   Env.
 * @param string $lang
 *   Langcode.
 *
 * @return string
 *   Return pattern.
 */
function trlx_helper_content_section($section, $env, $lang) {
  $patterns = [];
  if (isset($section)) {
    switch ($section) {
      case 'trend':
        $patterns = [$env . ':home:tr_trends_' . $lang_code . '*', $env . ':listing:tr_trend_' . $lang_code . '*'];
        break;

      case 'insiderCorner':
        $patterns = [$env . ':home:insider_corner_' . $lang_code . '*', $env . ':listing:insider_corner_' . $lang_code . '*'];
        break;

      case 'sellingTips':
        $patterns = [$env . ':listing:selling_tips_' . $lang_code . '*'];
        break;

      case 'consumer':
        $patterns = [$env . ':listing:consumers_' . $lang_code . '*'];
        break;

    }
  }

  return $patterns;
}

/**
 * Implements hook_ENTITY_delete().
 */
function elx_utility_entity_delete(EntityInterface $entity) {
  $commonUtility = new CommonUtility();
  $env = \Drupal::config('elx_utility.settings')->get('elx_environment');
  if ($entity->getEntityTypeId() == 'node') {
    switch ($entity->gettype()) {
      case 'level_interactive_content':
        _elx_utility_http_delete_request($entity);
        break;

      case 'stories':
        $contentSection = $entity->get('field_content_section')->referencedEntities();
        $contentSectionkey = (!empty($contentSection)) ? (array_shift($contentSection)->get('field_content_section_key')->value) : '';

        if (isset($contentSectionkey)) {
          switch ($contentSectionkey) {
            case 'trend':
              $patterns = [$env . ':home:tr_trends_' . '*', $env . ':listing:tr_trend_' . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'insiderCorner':
              $patterns = [$env . ':home:insider_corner_' . '*', $env . ':listing:insider_corner_' . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'sellingTips':
              $patterns = [$env . ':listing:selling_tips_' . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

            case 'consumer':
              $patterns = [$env . ':listing:consumers_' . '*'];
              elx_utility_clear_redis_cache($patterns);
              break;

          }
        }
        break;

      case 'product_detail':
        $brand_id = $entity->get('field_brands')->first()->getValue()['target_id'];
        $brand_key = $commonUtility->getBrandKeyByTermId($brand_id);
        $lang_code = $entity->language()->getId();
        $patterns = [$env . ':brand:factsheets_' . $brand_key . '_' . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;

      case 'tools':
        $brand_id = $entity->get('field_brands')->first()->getValue()['target_id'];
        $brand_key = $commonUtility->getBrandKeyByTermId($brand_id);
        $lang_code = $entity->language()->getId();
        $patterns = [$env . ':brand:videos_' . $brand_key . '_' . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;

      case 'brand_story':
        $brand_id = $entity->get('field_brands')->first()->getValue()['target_id'];
        $brand_key = $commonUtility->getBrandKeyByTermId($brand_id);
        $lang_code = $entity->language()->getId();
        $patterns = [$env . ':brand:story_' . $brand_key . '*'];
        elx_utility_clear_redis_cache($patterns);
        break;
    }
    // Purge Redis data.
    elx_utility_purge_redis_data($entity);
    $response = new RedirectResponse('/dashboard/published');
    $response->send();
    return;
  }
  elseif ($entity->getEntityTypeId() == 'taxonomy_term') {
    $tid = $entity->id();
    $type = $entity->bundle();
    if ($type == 'badges') {
      $stamp_utility = new StampUtility();
      $stamp_utility->migrateStamp();
    }
    // Purge Redis data.
    elx_utility_purge_redis_terms_data($type, $tid);
  }
  elseif ($entity->getEntityTypeId() == 'entity_subqueue') {
    // Purge Redis data.
    if ($entity->id() == 'insider_corner_hompage') {
      $patterns = [$env . ':home:insider_corner_' . '*'];
      elx_utility_clear_redis_cache($patterns);
    }
    // Purge Redis data.
    elx_utility_purge_redis_data($entity);
  }
  elseif ($entity->getEntityTypeId() == 'menu_link_content') {
    if ($entity->getMenuName() == 'privacy-menu' || $entity->getMenuName() == 'social-media' || $entity->getMenuName() == 'header-menu' || $entity->getMenuName() == 'main') {
      // Purge Redis data.
      elx_utility_purge_redis_data($entity);
    }
  }
}

/**
 * Purge user data from elastic.
 */
function elx_utility_purge_elastic_data(EntityInterface $entity) {
  $uid = $entity->id();
  try {
    $elx_site_url = \Drupal::config('elx_utility.settings')->get('elx_site_url');
    $response = \Drupal::httpClient()->get($elx_site_url . "/lm/api/v1/purgeElasticUser?_format=json&uid=" . $uid, ['headers' => ['Accept' => 'application/json']]);

    return;
  }
  catch (RequestException $e) {
    return $e->getMessage();
  }
}

/**
 * Check and prepare redis pattern to delete.
 */
function elx_utility_purge_redis_data(EntityInterface $entity) {
  $pattern = elx_utility_get_redis_pattern($entity);
  if (!empty($pattern)) {
    try {
      $redisObj = RedisClientBuilder::getRedisClientObject('check');
      if (!empty($redisObj) && $redisObj->client) {
        $result = $redisObj->deleteKeyPattern($pattern);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('elx_utility')->error('Redis connection failed.');
    }
  }
}

/**
 * Check and prepare redis pattern to delete.
 */
function elx_utility_purge_redis_terms_data($type, $tid) {
  $pattern = elx_utility_get_redis_terms_pattern($type, $tid);
  if (!empty($pattern)) {
    try {
      $redisObj = RedisClientBuilder::getRedisClientObject('check');
      if (!empty($redisObj) && $redisObj->client) {
        $result = $redisObj->deleteKeyPattern($pattern);
      }
    }
    catch (\Exception $e) {
      \Drupal::logger('elx_utility')->error('Redis connection failed.');
    }
  }
}

/**
 * Check for blog content field then returns redis pattern for deletion.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   Entity.
 *
 * @return string
 *   The pattern of the cached key to be deleted.
 */
function elx_utility_get_redis_pattern(EntityInterface $entity) {
  $lang_code = $entity->language()->getId();
  $pattern = [];
  $env = \Drupal::config('elx_utility.settings')->get('elx_environment');
  if ($entity->getEntityTypeId() == 'node' && !empty($entity->id())) {
    $entity_type = $entity->gettype();
    $uid = \Drupal::currentUser()->id();
    $entity_id = $entity->id();
    if ($entity_type == 'product_detail') {
      $pattern[] = implode(':', [$env, 'productDetails*']);
    }
    elseif ($entity_type == 'tools') {
      $pattern[] = implode(':', [$env, 'videoDetails*']);
    }
    elseif ($entity_type == 'stories') {
      $pattern[] = implode(':', [$env, 'storyDetail*']);
    }
  }
  elseif ($entity->getEntityTypeId() == 'menu_link_content') {
    if ($entity->getMenuName() == 'privacy-menu' || $entity->getMenuName() == 'social-media') {
      // Purge redis data.
      $pattern[] = implode(':', [$env, 'footerMenu*']);
    }
    elseif ($entity->getMenuName() == 'header-menu') {
      // Purge redis data.
      $pattern[] = implode(':', [$env, 'headerMenu*']);
    }
    elseif ($entity->getMenuName() == 'main') {
      // Purge redis data.
      $pattern[] = implode(':', [$env, 'navigationMenu*']);
    }
  }
  elseif ($entity->getEntityTypeId() == 'user') {
    // Purge Redis data.
    $pattern[] = implode(':', [$env, 'headerMenu*']);
  }
  // For non blog related content type : return entity type as a key for redis.
  else {
    $pattern = $entity_type;
  }

  return $pattern;
}

/**
 * Check for taxonomy term content then returns redis pattern for deletion.
 *
 * @param string $type
 *   Type of taxonomy term.
 *
 * @return string
 *   The pattern of the cached key to be deleted.
 */
function elx_utility_get_redis_terms_pattern($type, $tid) {
  $uid = \Drupal::currentUser()->id();
  $env = \Drupal::config('elx_utility.settings')->get('elx_environment');
  $pattern = [];
  if ($type == 'consumer_category') {
    $pattern[] = implode(':', [$env, 'landing:consumer_categories_*']);
  }
  elseif ($type == 'static_translation') {
    $pattern[] = implode(':', [$env, 'translation_key_*']);
  }

  return $pattern;
}

/**
 * Get type of taxonomy term.
 *
 * @param int $tid
 *   Id of taxonomy term.
 *
 * @return string
 *   The type of the taxonomy term.
 */
function elx_utility_get_term_type($tid) {
  $type = db_select('taxonomy_term_field_data', 'tfd')
    ->fields('tfd', ['vid'])
    ->condition('tfd.tid', $tid, '=')
    ->execute()->fetchAssoc();
  return $type['vid'];
}

/**
 * Set node id and terms id using rest resource.
 *
 * @param object $node
 *   Node object.
 *
 * @return json
 *   API url to update the data in DB.
 */
function _elx_utility_http_delete_request($node) {
  $elx_site_url = \Drupal::config('elx_utility.settings')->get('elx_site_url');
  $uri = $elx_site_url . '/lm/api/v1/deleteTermsNodeData';
  $nid = $node->id();
  $tid = $node->get('field_learning_category')->getValue()[0]['target_id'];
  $client = \Drupal::httpClient();
  try {
    $request = $client->post($uri, [
      'json' => ['nid' => $nid, 'tid' => $tid],
      'headers' => ['Accept' => 'application/json'],
    ]);
    $response = json_decode($request->getBody());
  }
  catch (\Exception $e) {
    return $e->getMessage();
  }

  return TRUE;
}

/**
 * Implements hook_mail_alter().
 */
function elx_utility_mail_alter(&$message) {
  // Add html in mail header.
  $message['headers']['content-type'] = 'text/html';
}

/**
 * Implements hook_preprocess_views_view_field().
 */
function elx_utility_preprocess_views_view_field(&$variables) {
  global $base_url;
  $variables['front_end_url'] = \Drupal::config('elx_utility.settings')->get('elx_front_end_url');
  $variables['site_base_url'] = $base_url;
}
