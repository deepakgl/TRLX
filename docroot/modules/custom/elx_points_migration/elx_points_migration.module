<?php

use Drupal\taxonomy\Entity\Term;
use Drupal\Core\Link;
use Drupal\Core\Url;
use Elasticsearch\ClientBuilder;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Language;

function migrate_badge_master() {
  $query = \Drupal::entityQuery('taxonomy_term');
  $query->condition('vid', 'badges');
  $lang = \Drupal::languageManager()->getLanguages();
  $lang = array_keys($lang);

  // Get terms Ids.
  $tids = $query->execute();

  // Loading the multiple terms by tid.
  $terms = \Drupal\taxonomy\Entity\Term::loadMultiple($tids);

  foreach ($lang as $key => $value) {
    // Tree by Term name
    foreach ($terms as $term) {
      $translated_term = \Drupal::service('entity.repository')->getTranslationFromContext($term, $value);
      $badge_master[$translated_term->name->value] = [
        'tid' => $translated_term->id(), // Term id.
        'src' => $translated_term->field_badge_image->target_id,
        'title' => $translated_term->field_badges_title->value,
      ];
    }
    $hosts = [
      [
        'host' => \Drupal::config('elx_utility.settings')->get('elastic_host'),
        'port' => \Drupal::config('elx_utility.settings')->get('elastic_port'),
        'scheme' => \Drupal::config('elx_utility.settings')->get('elastic_scheme'),
        'user' => \Drupal::config('elx_utility.settings')
          ->get('elastic_username'),
        'pass' => \Drupal::config('elx_utility.settings')
          ->get('elastic_password'),
      ],
    ];
    $client = ClientBuilder::create()->setHosts($hosts)->build();
    $env = \Drupal::config('elx_utility.settings')->get('elx_environment');
    // Check for index existence previously.
    $indexParams = [
      'index' => $env . '_badge_master',
      'type' => 'badge_master',
      'id' => $value,
    ];
    $exist = $client->exists($indexParams);
    // If index not exist, create new index.
    $params = [
      'index' => $env . '_badge_master',
      'type' => 'badge_master',
      'id' => $value,
      'body' => [
        'badge' => $badge_master,
      ]
    ];
    $response = $client->index($params);
  }

}


/**
 * Implements hook_form_alter().
 *
 * @param array $form
 * @param array FormStateInterface $form_state
 * @param string $form_id
 */
function elx_points_migration_form_alter(&$form, FormStateInterface $form_state, $form_id) {


}
